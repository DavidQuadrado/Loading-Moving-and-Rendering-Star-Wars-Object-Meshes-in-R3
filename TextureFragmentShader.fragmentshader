#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

void main(){



vec3 LightColor = vec3(0.6, 0.8, 1.0); // Azul muito claro




	float LightPower = 10000.0f; // Aumentar intensidade


	
	// Material properties
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );


	vec3 n = normalize( Normal_cameraspace );

	vec3 l = normalize( LightDirection_cameraspace );

	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	color = 
    // Ambient: Simula a luz indireta, considerando que não há atmosfera no espaço
    MaterialAmbientColor +
    
    // Diffuse: Cor do objeto, atenuada pela distância. Como no espaço, a luz é mais intensa e direta, sem dispersão atmosférica.
    MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance) +

    // Specular: Reflexo especular mais suave, porque no espaço não há atmosfera para dispersar a luz
    MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5) / (distance * distance);



}